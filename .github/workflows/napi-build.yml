name: Build and Publish NAPI

on:
  push:
    branches: [main, master]
    paths:
      - 'napi/**'
      - 'core/**'
  pull_request:
    branches: [main, master]
    paths:
      - 'napi/**'
      - 'core/**'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.target }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: napi/pnpm-lock.yaml

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: pnpm install
        working-directory: napi

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          
          [env]
          CC_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-gcc"
          CXX_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-g++"
          AR_aarch64_unknown_linux_gnu = "aarch64-linux-gnu-ar"
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER = "aarch64-linux-gnu-gcc"
          EOF

      - name: Build
        run: pnpm build --target ${{ matrix.target }}
        working-directory: napi
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: napi/*.node
          if-no-files-found: error

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.os }}
    name: Test ${{ matrix.target }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: napi/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install
        working-directory: napi

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: napi

      - name: Test bindings
        run: pnpm test
        working-directory: napi

  publish:
    if: github.event_name == 'release'
    needs: [build, test]
    runs-on: ubuntu-latest
    name: Publish to npm

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: napi/pnpm-lock.yaml
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: pnpm install
        working-directory: napi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: napi/artifacts

      - name: Move artifacts
        run: pnpm artifacts
        working-directory: napi

      - name: Publish to npm
        run: npm publish --access public
        working-directory: napi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}